// parameters or env
// aliRegistry(optional), default: harbor.shanghaicang.com.cn:1443
// imageTag(optional), the build docker image tag, default: dev
// pushImage(optional), whether push image to ali registry, default: true
// nodeLabel(optional), the run jenkins node label, default: null, run in master
// namespace(required), the running namespace in kubenetes
// k8sService(optional), the k8s deployment service, default as service

namespace="devops"
deployName="devops-deploy"
containerName="devops-containers"
imagePath = "library/devops-test"
deployEnv = "test"

// Set ali image registry
if(params.dockerRegistry) {
    registry = params.dockerRegistry
} else if(env.dockerRegistry) {
    registry = env.dockerRegistry
} else {
    registry = "10.10.5.42"
}

// Set image tag
if(params.imageTag) {
    imageTag = params.imageTag
} else if(env.imageTag) {
    imageTag = env.imageTag
} else {
    imageTag = "dev"
}

// Set whether push to ali image registry
if(params.pushImage && "true".equals(params.pushImage)) {
    pushImage = true
} else if(env.pushImage && "true".equals(env.pushImage)) {
    pushImage = true
} else {
    pushImage = true
}

// Set running node label
if(params.nodeLabel) {
    nodeLabel = params.nodeLabel
} else if(env.nodeLabel) {
    nodeLabel = env.nodeLabel
} else {
    nodeLabel = null
}

if(params.k8sContainerName) {
    k8sContainerName = params.k8sContainerName
} else if(env.k8sContainerName) {
    k8sContainerName = env.k8sContainerName
} else {
    k8sContainerName = containerName
}

if(params.k8sDeployName) {
    k8sDeployName = params.k8sDeployName
} else if(env.k8sDeployName) {
    k8sDeployName = env.k8sDeployName
} else {
    k8sDeployName = deployName
}

if(params.deployEnv) {
    deployEnv = params.deployEnv
} else if(env.deployEnv) {
    deployEnv = env.deployEnv
} else {
    deployEnv = deployEnv
}

if(deployEnv == "prod") {
    checkoutBranch = "master"
} else {
    checkoutBranch = deployEnv
}



// 发布版
// versionDate = new Date().format("yyyyMMddHHmmss")
imageTag = imageTag + '-'+deployEnv + '-' + "${BUILD_ID}"
harborImagesUrl = registry + '/' + imagePath + ':' + imageTag


// 稳定版
stableImageTag = deployEnv + '-' +'stable'
stableHarborImagesUrl = registry + '/' + imagePath + ':' + stableImageTag


def deployK8s(deployHarborImgUrl) {

     deployDate = new Date().format("yyyy-MM-dd-HH-mm-ss")
    // 远程
    // exec = 'ssh fubiao@192.168.20.252 ' + '"sudo kubectl -n ' + namespace + ' patch deployment ' + k8sService + '  --patch ' +  ''' '{\\"spec\\":{\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"redeploy\\":\\"''' + deployDate + '''\\"}},\\"spec\\":{\\"containers\\":[{\\"name\\":\\"''' + k8sService + '''\\",\\"image\\":\\"''' + image + '''\\"}]}}}}' ''' + '"'
    // 本地
    exec = 'kubectl -n ' + namespace + ' patch deployment ' + k8sDeployName + '  --patch ' +  ''' '{"spec":{"template":{"metadata":{"labels":{"redeploy":"''' + deployDate + '''"}},"spec":{"containers":[{"name":"''' + k8sContainerName + '''","image":"''' + deployHarborImgUrl + '''"}]}}}}' '''
    sh exec

    // 应用是否更新完成
    sh '''
        last_str=$(curl --connect-timeout 5 -m 5 http://10.10.5.43:31897/check)
        echo "last_str=${last_str}"
        for i in {1..120}
        do
            sleep 1s
            new_str=$(curl --connect-timeout 5 -m 5 http://10.10.5.43:31897/check)
            echo $i"="$new_str
            if [ "${last_str}" != "${new_str}" ]; then
                echo "deploy k8s success"
                exit 0;
            fi
        done
        echo "deploy k8s fail"
        exit 2;
    '''
}

def getGitBranchName() {
    return scm.branches[0].name.split("/")[1]
}

nodeLabel = "master"
node(nodeLabel) {
    def app

    // 默认 test 分支
    stage('Checkout from GitLab') {
        checkout scm
        print "$env"
        def BRANCH_NAME = getGitBranchName()
        print "BRANCH_NAME=${BRANCH_NAME}"
        sh 'env'
        if ( BRANCH_NAME != checkoutBranch ) {

            // 非部署分支，重新拉取
            script {
                git branch: checkoutBranch,
                credentialsId: 'gitlab',
                url: 'http://10.10.5.42:10000/devops/java-test.git'
            }

            git branch: "${checkoutBranch}", credentialsId: 'gitlab', url: 'http://10.10.5.42:10000/devops/java-test.git'
            sh label: '',script: "git checkout ${checkoutBranch}"
            print "git pull ${checkoutBranch} Success!"
        }
    }

    //stage("Checkout from GitLab") {
    //    script {
    //        git branch: checkoutBranch,
    //        credentialsId: 'gitlab',
    //        url: 'http://10.10.5.42:10000/devops/java-test.git'
    //    }
    //}

    stage('Unit Test') {
        try {
            sh '''
                mkdir -p /open/data/gradle/
                DIR=$PWD
                docker run -u root -v /open/data/gradle/:/home/gradle/.gradle/  -v ${DIR}:/home/gradle/ --rm  gradle:4.10.2-jdk11  /home/gradle/gradlew clean
                docker run -u root -v /open/data/gradle/:/home/gradle/.gradle/  -v ${DIR}:/home/gradle/ --rm  gradle:4.10.2-jdk11  /home/gradle/gradlew test -Pprofile=test
            '''
        } catch(error) {
            echo "Failed to Junit: " + error.getMessage()
            sh 'exit 1'
        } finally {
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: 'build/reports/tests/test/',
                reportFiles: 'index.html',
                reportName: 'Junit Report'
            ])
        }
    }

    stage('Code Check') {
        // 基于 gradle
        //  sh '''
        //    mkdir -p /open/data/gradle/
        //    DIR=$PWD
        //    docker run -u root -v /open/data/gradle/:/home/gradle/.gradle/  -v ${DIR}:/home/gradle/ --rm  gradle:4.10.2-jdk11  /home/gradle/gradlew sonarqube  -Dsonar.projectKey=devops  -Dsonar.host.url=http://192.168.1.22:9000   -Dsonar.login=d52b0d79dafa5b319442ed23fae5aa980f0b5a53
        //  '''

        // 基于 插件
        script {
            // tool配置名字
            def scannerHome = tool 'sonarqube';
            withSonarQubeEnv("sonarqube-container") {
                sh "${tool("sonarqube")}/bin/sonar-scanner \
                    -Dsonar.projectKey=devops-java \
                    -Dsonar.sources=src/main/java/ \
                    -Dsonar.java.binaries=build/classes \
                    -Dsonar.language=java \
                    -Dsonar.host.url=http://10.10.5.42:9000 \
                    -Dsonar.login=a5b71aa10484db2c7a1614f6f601d687f9d556e2"
            }
            timeout(time: 1, unit: 'HOURS') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
        }
    }

    stage('Build Jar') {
        sh '''
            DIR=$PWD
            docker run -u root -v /open/data/gradle/:/home/gradle/.gradle/  -v ${DIR}:/home/gradle/ --rm  gradle:4.10.2-jdk11 /home/gradle/gradlew bootJar --profile  --warning-mode all
            cp build/libs/devops-test-1.0.0-boot.jar devops/docker/

            files=`ls ./build/reports/profile/`
            cd build/reports/profile/
            for file in $files
            do
                if [ -d $file ];then
                   continue
                fi
                mv $file index.html
            done
        '''
        publishHTML([
            allowMissing: false,
            alwaysLinkToLastBuild: false,
            keepAll: true,
            reportDir: 'build/reports/profile/',
            reportFiles: 'index.html',
            reportName: 'BuildJar Report'
        ])
    }

    stage('Build Image') {
        //修改java启动环境
        sh '''
            cd devops/docker
            echo $PWD
            sed -i "s/spring.profiles.active=test/spring.profiles.active=${deployEnv}/g" "Dockerfile"
        '''

        dir ("devops/docker/") {
            app = docker.build(harborImagesUrl)
            app.push(imageTag)
        }
    }

    stage('Deploy') {
        deployK8s(harborImagesUrl)
    }

    stage('RollBack') {
        if( input("do you want to rollback ?") ) {
            // 回滚,上次的稳定版
            print "yes=>${operation}"
            deployK8s(stableHarborImagesUrl)
        }else {
            // 保存本次为 stable 版本
            print "no=>${operation}"
            dir ("devops/docker/") {
                app = docker.build(stableHarborImagesUrl)
                app.push(stableImageTag)
            }

        }
    }
}


